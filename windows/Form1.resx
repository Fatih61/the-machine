<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAAAAAAAEAIADRFwAAFgAAAIlQTkcNChoKAAAADUlIRFIAAAEAAAABAAgGAAAAXHKoZgAAF5hJ
        REFUeNrt3XmQHFd9B/Dve6+n5z60ktbSGiRrV17JtiQg2FRsrVM5MNhQBS4MNvknVCAVqDIUxgc2NiYu
        jIWFLWGHchV/keKPVKiQFJgE3xwBOUlhEyhLlqzV5RXWSl6tRnPsXD3d/fJHz45ke6e7Z3dkDbvfT5Wq
        fMw89XT3+3ZPz3u/JwBoENGSJLkLiBgARMQAICIGABExAIhocTO6fYNpSuSyCmZUQohw7xEAGpbGyZMW
        XJc7nagTKYGVK01ETRH65zmtAavholB0YFnddTCBkD8DrlgRwbUfGMA17x/AyHAMiYQKHQBKCry0Zwaf
        u3kcMzMOjzJRB6mUwncfG8WWTSk4brgI0BqoVh0cOlzHs8/l8dQzeUxPN0O9N9QdwPuuyOCrX1mLK/80
        g6gp4W1X+OEDSglMn2pCShH6PVIKZNIKUgnvE3YiBBxHo1x24IbYYUoKpDMKUgRkX7tdO9Rdi1IC6bRC
        4EcUAo6tUSrbvh+rfYBa7YoQ7dq2t71+7cbjEvG4eus+FQK1moNazfX7K5BOGzCMgGPSOinLZQe2E/wh
        hQAyaQMqRLtuq10nRLtSeturgs4hCLhao1xyQnU6Kb1jokKcm66jUQp5bs62PbQ6inXrYqE+45lPILBl
        UwofunYAn/jfEr6x7VW88GJ54QFwxeVpfOfbF2PjxgQcR4c6oHMdYN3l2wZXRvDIjvUYGor67jwpBY4d
        a+CLtx3E1JQV2O7q1SYe2bkegytMuNq/3Vcn6rjltoPI54PTdM07o/j2jvVYlotAB7R74GANX7r9IEol
        O7Dd4ZE4dmwfQSZj+LarlMCelyu4485DmKl0vsv65I0X4NOfWvWWE11Jge99/wT+6fvHO743mVDYvm0Y
        my5L+p6cQgiUSjZuu/MQxsergZ8xnTaw8+H1uHh93PdYCyFwutDEl247iCOv1gPbzeW8c+iitTH/c0gI
        TE1buOXWg3jtWCOw3RUrInh0x3pceGHwuTk52cAttx3EideDz82zw9N10eXXZd0+D/78z3K4YHAUX7hl
        PDAEfANg+fII7rlrbbvzv51MU+DSS5JYty7muyOkBLIZA2Yk3N2FGZXYdGkSQ0NR31CS0rtaRoxw7cZi
        EpsvS2Hlykhgu1IK7yoaQiIusXlzCgPLDN92lQIsS3tXJb8AXGXiPe9OwXnTPlUSWP206ftepQRGL054
        73f8Az9/2kYiHu4Zs2EIbBhN4F1bkr7HWgjg5MkmYrFw7UYMgUs2JrBxQyKw3cnJBsxouHbNiHduDg8H
        n5u5rAHTDH/n2wuOo3HJxgTuuWstPvP3+3HK5wLmGwDXfXAAV12Vfds7/2yeOa6G48A3ZbUWoW+vZht2
        XK9N34TVAq4b/ovOme3VAXc7re3V4b/fuU4X7QZwtYbjYo5jKnzviNrvbx0T/zsAb5t1F0+xZo9HULuO
        q7s6Jq4LuA58b+2l9M6JbgbFuyHPzW62t9chcNWVWVz7wQH887+83n0AmKbENX81gJgp53Xb34sEcNsd
        1f/vd7r8ZWH24Omg75tdBsvsSdzTdhGuXSHQVWDN85CEOiZCiHl9RscJ2W63HTVge7u+iODsi0jQscZ5
        m20Ti0pc8/5l+OG/T8GydHcBkMsqjIzE4J6njT+Vt3H3Vw8jmVQBJ77ATMXxvc0529SUhTvuOjT3g7A3
        tVsq2ygV7VDtTk42cOsdhxCNioBniwKFoo2ZSrjUmjjqPYeIBHzFEUIgn2+iVjt3v7LUag6+uX0CAwOR
        wJBrNjUmjtZDtTtTcfH1ByaQy/o/54AAGg2NyclGqHZLRRv33ncEmXRQu94D0DDPkLxzs4m77z2MVIhz
        s1JxcCpv43zQGhgZjiObNXDyZLO7AIhGJZIJ5RtfQoR7wDf7um5Uqw6efjbf850yU3Hw1NO9b7dUdvDE
        k6d63m6hYOM/n+h9u/PRbGr88leFnrdrWS5+/ovTPW+33nDx3M96326t5uKZc3Buvrm/BPWZ2b7Xqf9p
        aKSSCjGfZxudnwGI1h+fv3z//ip+8MMpVCoOhM+LhfSuvPU6RwER+anXXXznsdcwOGhC+3SX2c59042D
        2DCa6HwRDujHxnw3VAjgBz+cwiP/+BqPGlGPWJaLHz0+3dV7/uHei7r+mX3WvOcCaA1UKhzVR3Q+zVSc
        eXf+BQUAAN/bfiI69xbaBzkbkGgJYwAQMQCIiAFAREuKwV2wtGgXsG39lrHxWsP3d2diANAi8OOfTGPv
        K9U56wGEmbpLSyQABLw54kqJOYckCuGN8KM/LvvHq9jPjr5oCOlN055rLICUXh8W8wmAhqWxe88Mpk81
        52xcCISePEFE58bUlIUXf1vu2EePH2+gYfnM50GH2T5SAomE8i3jVa+7XRchJKLeMU3pWyDFdTWqVadj
        7YvQRUGJaPHht3giBgARMQCIiAFARAwAImIAEBEDgIgYAETEACCiRSBwNqCUAoMrIzBn1yvX3qId1SoL
        ghL1i0RCYfmAAQhveK9laUydbAauXBQYAOm0wiM71uPSS5KtJZaAr3z18DldGIGIujO2NYtvfmO4PQNw
        774KPnvzOIoBK1sFBoBSAkNDs+uVe5MLUknFPU7UR1JJhXUXxSClgFJAoWgHrhQdKgDOXrl1djFErTl/
        iKifaH1modIzi6gG91M+BCRawhgARAwAImIAEBEDgIgYAES0yAX/DCgEpBSQEtBatP4TVwUm6iei3U+9
        viqlAEQPxgE4jsaxYw1kMwZcV8NxvTXJiah/zFQcHD5Sh2p1/mPHGnCc4HEAgVWBpRRYsSICM+KliQaQ
        zzdRq7EcOFG/iMclBgYi7UVArKbG9HTwXACWBSdawvgQkIgBQEQMACJiABARA4CIGABExAAgIgYAES0e
        oWoCrl5lwozK9pChqSmLw4GJ+kgqqTA4aHr/IgCr4eL4CStwOHC4qsA712PTpUk4rbqAd9x1CE89zarA
        RP1ibCyLhx4c8YqCSmDP3gr+7rP7USgssCqwFAKDK0wMDUW9yUAOEI+zKjBRP4nHFYZWR6GUN39naqoJ
        GWI2YIhnABqu1tAacF2v+ihYFZiov2jdqgzsdU9Xa4SZ5sOHgERLGAOAiAFARAwAImIAEBEDgIgWua6q
        AoNVgYn60mxVYHUuqgJPTNQRj8v2CsGlss09TtRHSmUb+8er7Yv1xES9V1WBgVwugogh2i8sFW3UG6wK
        TNQvYlGJTNZod+qmrVEoNOG6CwwAIlq8+BCQiAFARAwAImIAEBEDgIgYAETEACAiBgARLR6hqgKveWcU
        sZj0RgxpYHKygVKZVYGJ+kUmrTA0FAWEN7qvXndx9A+NHlUF3nExNl2WhONquK7GrXccwhNPnuJeJ+oT
        Y2M57HxopD0haM/LFXzqM/t6URUYyOUMrFwZgeN4RQejUc4GJOon0ajAyhUmpPTu2nM5AzJENw31DEC3
        qgJ7fzRnDxD1Gz1HPw2BDwGJljAGABEDgIgYAETEACAiBgARLXLdVQUGqwIT9aN2VWDV66rAtsaBgzVI
        KeC2RgIWiqwKTNRPCkUbL+2eaV2sBQ4crMGxe1AVWAggnTZgGKK9LPhMxYVlsSowUb8wTYlUUrY7rW1r
        lMs2gsYDsSow0RLGh4BEDAAiYgAQEQOAiBgARMQAICIGABExAIho8QgcCmwogeGROBJx2R5VNHG0Hlhs
        kIjePrmcgbVrYgC80bvVmovDh2qwe1EVeMf2EWzenILreHMBvnjbQfz0CVYFJuoXW6/K4tEd6725AEpg
        9+4Z/M3f7sPphVYFFgLIZAwMLDPaVYFNk7MBifqJaQosWxZpVwXOZIwwkwFZFZhoUWBVYCLqFgOAiAFA
        RAwAImIAEBEDgIgWuVBVgZUSUAoABIRgVWCifiPEbEVgr68q1aOqwLatseflCixLt6oCA6fyTe5xoj5y
        Kt/Eb14ot0uCjx+owu5VVeBkUkG1FhvXAGo1B80mRwMR9YtIRCAeV5i95juuRqXisCowEXXGh4BEDAAi
        YgAQEQOAiBgARMQAIKLFKnAgUDwu8ckbL8DqVSZc3d0vhq4LPP6Taewfr3JPE3Vpw2gCH/3ICsguL9NS
        CBw/YeEH//o6ajV3oQGg8OlPrcJ73p2C0+WK4Latse+VKgOAaB5GRxO48/Y1MIzuht4rCfzu9zN4/D+m
        Fx4A0BqOq+G4gON0dwfguK36RETUvVbfE063bxSh+x6fARAtYQwAIgYAES1F4eoBSAElAaC7hxFaI9Sc
        ZCLy6Xuq+4eASvaoHkCt5uB73z+B1U/P72fAcf4CQDQv4+NVbH/46Lx/BqzVgp8ecjow0RLGZwBEDAAi
        YgAQEQOAiBgARMQAIKLFKnAcAMuCE/W/+ZYFDwyAdNrA9m3DGL040V4YZNv2CfzXrwrc60R94qors7j7
        zrVvWBjkzrsPo1SyFxYAhiGw6bKkVw/AAVxXY/lAhHucqI8sH4jgfVek20uDmaYIVUcgXD0AR8NxvHoA
        rquhOcefqK/oVj/1uqbwanewHgARMQCIiAFARAwAImIAEBEDgIgB4E8IAdGqMCSE6LYyGBGda2KOfhpC
        4DgArYFSyUb+tA23NQ7AsjgOgKifWJbG6dNNSCkglUCpZIdakiOwJJihBIZH4kjEZbvBiaN1FAo29zpR
        n8jlDKxdE/M6tQCqNReHD9VgByzmw5qAREsYHwISMQCIiAFARAwAImIAEBEDgIgYAETEACCixSNUVeB0
        2vDqi7WGAs5UXFiWy71H1CdMUyKVlO1Oa9sa5bK98KrAmbSBnQ+vx4bR2arAGl9/YAI//8Vp7nWiPjG2
        NYuv3bPWmwsgBfaPV3Hr7QdRXGhVYGUIXLw+jndtScJ1vcKguayxaHYc0WKQyxrYsjkFpQSk9Kp3q15V
        BZ5dD4BVgYn6k271U4/w/plVgYmIAUBEDAAiYgAQEQOAiBgARAwAf6wKTNTnzlVVYFcDhYKNkyebcFoj
        ARsNjgMg6ieNhsbJactbHlwKFAo23F5UBVZKYM07o4jFpPdCDUxONlAqO9zrRH0ik1YYGop6dwIA6nUX
        R//Q8JYJX0gAENHixYeARAwAImIAEBEDgIgYAETEACAiBgARMQCIaPEIHAosJZDLRRAxRHvEUKloo95g
        VWCifhGLSmRatToFgKatUSg04boLDIB02sCjO9Zj48YEXNcrNnjvfUfw3M9YFZioX4yNZXH/fetaVYGB
        V16p4vO3HECxuNCqwEpg7doYNm5IwHUAx9XIpFkVmKifZNIGNowmoKSAVECt5kKpXlcFdlkVmKgfvaEq
        sGBVYCIKgQFAxAAgIgYAETEAiIgBQEQMAAHZqjYq5WxVYJYFJuorQkAI0eqjgBQCYcp3h6gKrDE1bWFy
        sgGnNRKwVmNBUKJ+Uqs5mDzeaFUFBqamLbghxgGEqgq8epUJMyrbr5yasjBTYQgQ9YtUUmFw0Gz3aqvh
        4vgJi1WBiagzPgQkYgAQEQOAiBgARMQAICIGABExAIiIAUBEi0eIqsACK1ZEYEa8ccUaQD7fRK3GqsBE
        /SIelxgYiLRH/1tNjenp5pkyYfMNgHRa4dEd63HpJUm4robjAnffexjPPJvnXifqE1eP5bDt/mEo6V20
        9+6r4HOfH+9NVeALL4xieDgGx/EmA6WSinucqI+kkgrD62LeZCAFFEt276sCu6wKTNSXzq4KLFgVmIjC
        YAAQMQCIiAFARAwAImIAENEiF/wzoBDtJYe1Fq3/xKrARP1EtPup11elDFe9OzAAHEdjcrKBXNZorQ4M
        FgQl6jMzFQdHXq1DSkBJ4VXxdnpQFVhKgcGVEZim8F6ogVN5G9UqQ4CoXyQSCssHDEB4ndqyNKZOBs8F
        YFVgoiWMDwGJGABExAAgIgYAETEAiIgBQEQMACJiABARA4CIFoGOcwGk9IYXStl5QkG97sKyWB6c6Hwx
        TYlYrPN13HU1qlUHrttlAKxcaWLnt0awenV0ztqCQgDfeew1/OjxaR4FovPkw9cN4As3v6NjHz1+vIFb
        v3wIr79udRcAUVNg86YU1q2LzZkeQgCDgyaPANF5NDho4vL3pucMACmBI0ciiJqd7+I7BoAG4LgajqM7
        BoDm3f8fnQ2jCYyOJt5aMloIjI9XsX+8yp30R0S73pT9uQJAa68P+832MxbtnqE5Xf+RFfjy7WvgvGma
        qJIC33r4KLY/fJQ7aQlhACwxQgKGISDeVM5BKQHB34SWHB5yIgYAETEAiIgBQEQMgECa5QSJzquF9sF5
        B4AQ3prkRHT+pJIKC1mmY94/A2oN3HTjIDSASsWBQOetEBKYmrLw0yfznDtA5MM0JT583QAGB03fgXYa
        Gsmkwk03XjDnIKCFB4CGb8Fwrb1RZffde1HgBigl8OJvy/jZLwoMACIfsZjEF25+By5/bzpwYQ8hvH6o
        A/qpXz/uGAD1hnvWlV13bDxM+oR93dkSCYWrt2aRTCponzcLITBTcfDrXQXUasHhkkoqjI1lEY8r340S
        QqBUtrFrVxH1RnC7mbTC2FgO0ajw3eFCCBSKNnY9XwwVhrmcgbGrsohERMDJIJDPN/H8/xTRbJ6bZzOR
        iMDWK7MYGIj4HhMAaDY1dv13EYWCHdiuaUqMbc0ilzX82xVAo6Gxa1cBpXLwwjSxqMTYWBaZdFC7ArWa
        g127iqFWvYrHJa4eyyEV4tysVBz8+vliVwvpzPaXoD4T9P8FvL/f7/ztGADFoo2Dh2vYsjl1XpJw+YCB
        bd8YxrqLYr6rm0gpcPhIHdffsBuvHWsEtjs4aOKhB0cwtDrqe/CkFNg/XsVHb9iD+pQV2O7QUBQ7HxrB
        yhVmYLsv7Z7Bxz6xB/kQAbB2TQyP7FiPZcv8O51SAr95oYxP/PXLaDZtnAvxuMJX7lyL913hf3USQuD0
        6SZuuOllFAozIUJZ4mv3rMWWzSnfYy2EwMlpC9ffsAel/cFzFjJZA/fftw4bRhOB7U4eb+CjH9uDmSO1
        EOdmBNvuH8bwuuBz88ir3rl5PlbSEgI4dKiGok8IdwwAy9J49rnT+NC1y2EY52ExUIEzixz6kFJAdfko
        U0oBpQDX7dy2ai202N32vnER1U4dtat2Ea7d2decyyMlcOaYBFxQ5/UZlQq6y5ld9LLLdgPPoe63V4U8
        N6XEuT0oPuoNF888dxqWzx2h70PAp57O4+MfK+Iv/2JZqIUGe32yqVZH9VuNuOuDJ84cPL+np1674Y/d
        me317xzdrNzaPulVcLtKhdsPUswGpnjrCR1im2bD02/PzG5z6KfTZ61AHdSukqKrYyIlIBV897donRNd
        B0uIc7Ob7e0lpQR++asCnnom7/s63wA4lW/igQcnsGqViUsvSb6tIWBZGnv3VVAo2oG3WceONXxT7g3t
        Nlzs2VvB1FQTbsCt+qsTdTTtcO3W6y52vzyDZblI4FeAAwdrsEO2W6252L17BpmMEfgVYPxANfAYHT9h
        4Xe/n5lzNuDxE/5fdRxHY/xAFaYpAr8ClEo2qrVwD3xtW2P/eBWuqwNv1U8XmqjXw7XbtDX2vVJFreb6
        n0NCYGragtUI167V9M7NYin43JycbMCy3t6Lp1ICe/dV8MA3J5DPNwNDMnDr3vsnadx911pcvTWLWFTC
        nV0muIsNeuHFMq7/+B6USuG+n0opkEkrSCUQdL/pOBrlshO4EursiZ7OqNbVLky7dsdySm/+jOm0QuBF
        WAg4tkapbId6MGq02hUh2rVtb3v92o3H5dwPQFsPwvwepAoBpNOG95UwYOO1BsplB3aYJaoFkEkbUCHa
        dVvthrkYSeltrwo6hyDgao1yyXlLMHY6N9NpFdyuEHAdjVLIcxMAMhkDP/63Tbji8nSXF1wBKbzb/l8/
        X8S2Byfw2/8rh3hXyJ48MBDBdR8cwAeuGcDIcAzJhAp9y6SkwEt7ZvC5m8cxM8NlxYk6SaUUvvvYKLZs
        SoUKI8DrwZWqg0OH63jm2TyefCqP/OlmyNjocnlw05TIZRWi0fBfkAWAhqVx8qQV6mpKtFRJ6dXjjJoi
        fMfUQKPholB0uh5n03UAENHiwdmARAwAImIAEBEDgIgYAES0yP0/91IVe6s5N7IAAAAASUVORK5CYII=
</value>
  </data>
</root>